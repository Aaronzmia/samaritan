// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan/proc (interfaces: Proc)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	host "github.com/samaritan-proxy/samaritan/host"
	service "github.com/samaritan-proxy/samaritan/pb/config/service"
	reflect "reflect"
)

// MockProc is a mock of Proc interface
type MockProc struct {
	ctrl     *gomock.Controller
	recorder *MockProcMockRecorder
}

// MockProcMockRecorder is the mock recorder for MockProc
type MockProcMockRecorder struct {
	mock *MockProc
}

// NewMockProc creates a new mock instance
func NewMockProc(ctrl *gomock.Controller) *MockProc {
	mock := &MockProc{ctrl: ctrl}
	mock.recorder = &MockProcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProc) EXPECT() *MockProcMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockProc) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockProcMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockProc)(nil).Address))
}

// Config mocks base method
func (m *MockProc) Config() *service.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*service.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockProcMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProc)(nil).Config))
}

// Name mocks base method
func (m *MockProc) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProcMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProc)(nil).Name))
}

// OnSvcAllHostReplace mocks base method
func (m *MockProc) OnSvcAllHostReplace(arg0 []*host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSvcAllHostReplace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSvcAllHostReplace indicates an expected call of OnSvcAllHostReplace
func (mr *MockProcMockRecorder) OnSvcAllHostReplace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSvcAllHostReplace", reflect.TypeOf((*MockProc)(nil).OnSvcAllHostReplace), arg0)
}

// OnSvcConfigUpdate mocks base method
func (m *MockProc) OnSvcConfigUpdate(arg0 *service.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSvcConfigUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSvcConfigUpdate indicates an expected call of OnSvcConfigUpdate
func (mr *MockProcMockRecorder) OnSvcConfigUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSvcConfigUpdate", reflect.TypeOf((*MockProc)(nil).OnSvcConfigUpdate), arg0)
}

// OnSvcHostAdd mocks base method
func (m *MockProc) OnSvcHostAdd(arg0 []*host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSvcHostAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSvcHostAdd indicates an expected call of OnSvcHostAdd
func (mr *MockProcMockRecorder) OnSvcHostAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSvcHostAdd", reflect.TypeOf((*MockProc)(nil).OnSvcHostAdd), arg0)
}

// OnSvcHostRemove mocks base method
func (m *MockProc) OnSvcHostRemove(arg0 []*host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSvcHostRemove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSvcHostRemove indicates an expected call of OnSvcHostRemove
func (mr *MockProcMockRecorder) OnSvcHostRemove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSvcHostRemove", reflect.TypeOf((*MockProc)(nil).OnSvcHostRemove), arg0)
}

// Start mocks base method
func (m *MockProc) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockProcMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProc)(nil).Start))
}

// Stop mocks base method
func (m *MockProc) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockProcMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProc)(nil).Stop))
}

// StopListen mocks base method
func (m *MockProc) StopListen() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopListen")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopListen indicates an expected call of StopListen
func (mr *MockProcMockRecorder) StopListen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopListen", reflect.TypeOf((*MockProc)(nil).StopListen))
}
