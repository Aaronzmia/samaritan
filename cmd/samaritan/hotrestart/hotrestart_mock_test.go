// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan/cmd/samaritan/hotrestart (interfaces: Instance)

// Package hotrestart is a generated GoMock package.
package hotrestart

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInstance is a mock of Instance interface
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// DrainListeners mocks base method
func (m *MockInstance) DrainListeners() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DrainListeners")
}

// DrainListeners indicates an expected call of DrainListeners
func (mr *MockInstanceMockRecorder) DrainListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainListeners", reflect.TypeOf((*MockInstance)(nil).DrainListeners))
}

// ID mocks base method
func (m *MockInstance) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockInstanceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockInstance)(nil).ID))
}

// ParentID mocks base method
func (m *MockInstance) ParentID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ParentID indicates an expected call of ParentID
func (mr *MockInstanceMockRecorder) ParentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentID", reflect.TypeOf((*MockInstance)(nil).ParentID))
}

// Shutdown mocks base method
func (m *MockInstance) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockInstanceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockInstance)(nil).Shutdown))
}

// ShutdownAdmin mocks base method
func (m *MockInstance) ShutdownAdmin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownAdmin")
}

// ShutdownAdmin indicates an expected call of ShutdownAdmin
func (mr *MockInstanceMockRecorder) ShutdownAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownAdmin", reflect.TypeOf((*MockInstance)(nil).ShutdownAdmin))
}

// ShutdownLocalConf mocks base method
func (m *MockInstance) ShutdownLocalConf() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownLocalConf")
}

// ShutdownLocalConf indicates an expected call of ShutdownLocalConf
func (mr *MockInstanceMockRecorder) ShutdownLocalConf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownLocalConf", reflect.TypeOf((*MockInstance)(nil).ShutdownLocalConf))
}
