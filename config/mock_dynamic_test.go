// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan/config (interfaces: DynamicSource)

// Package config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynamicSource is a mock of DynamicSource interface
type MockDynamicSource struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicSourceMockRecorder
}

// MockDynamicSourceMockRecorder is the mock recorder for MockDynamicSource
type MockDynamicSourceMockRecorder struct {
	mock *MockDynamicSource
}

// NewMockDynamicSource creates a new mock instance
func NewMockDynamicSource(ctrl *gomock.Controller) *MockDynamicSource {
	mock := &MockDynamicSource{ctrl: ctrl}
	mock.recorder = &MockDynamicSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamicSource) EXPECT() *MockDynamicSourceMockRecorder {
	return m.recorder
}

// Serve mocks base method
func (m *MockDynamicSource) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve
func (mr *MockDynamicSourceMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockDynamicSource)(nil).Serve))
}

// SetSvcConfigHook mocks base method
func (m *MockDynamicSource) SetSvcConfigHook(arg0 svcConfigHook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSvcConfigHook", arg0)
}

// SetSvcConfigHook indicates an expected call of SetSvcConfigHook
func (mr *MockDynamicSourceMockRecorder) SetSvcConfigHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSvcConfigHook", reflect.TypeOf((*MockDynamicSource)(nil).SetSvcConfigHook), arg0)
}

// SetSvcEndpointHook mocks base method
func (m *MockDynamicSource) SetSvcEndpointHook(arg0 svcEndpointHook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSvcEndpointHook", arg0)
}

// SetSvcEndpointHook indicates an expected call of SetSvcEndpointHook
func (mr *MockDynamicSourceMockRecorder) SetSvcEndpointHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSvcEndpointHook", reflect.TypeOf((*MockDynamicSource)(nil).SetSvcEndpointHook), arg0)
}

// SetSvcHook mocks base method
func (m *MockDynamicSource) SetSvcHook(arg0 svcHook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSvcHook", arg0)
}

// SetSvcHook indicates an expected call of SetSvcHook
func (mr *MockDynamicSourceMockRecorder) SetSvcHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSvcHook", reflect.TypeOf((*MockDynamicSource)(nil).SetSvcHook), arg0)
}

// Stop mocks base method
func (m *MockDynamicSource) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockDynamicSourceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDynamicSource)(nil).Stop))
}
